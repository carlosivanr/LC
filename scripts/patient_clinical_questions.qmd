---
title: "Patient clinical questions"
format: html
---


# Patient clinical questions
```{r, messge = FALSE, warning = FALSE}
pt_clinical <- get_report_data("151017", "raw")
```


```{r}
# Create a fabricated data in the pt_clinical data frame
pt_clinical %<>%
  mutate(across(months_symps, ~ sample(0:100, n(), replace = TRUE))) %>% # Fabricate data
  mutate(across(lcdiagnosis, ~ sample(1:3, n(), replace = TRUE))) %>% # Fabricate data
  mutate(lcdiagnosis = case_match(lcdiagnosis, 
                              1 ~ "Yes",
                              2 ~ "No",
                              3 ~ "Not Sure"
                              )) %>%
  mutate(across(ifyes_monthsymps, ~ sample(0:60, n(), replace = TRUE))) %>% # Fabricate data
  mutate(ifyes_monthsymps = ifelse(lcdiagnosis %in% c("Not Sure", "No"), NA, ifyes_monthsymps)) %>% # Fabricate data
  mutate(redcap_event_name = case_match(redcap_event_name, 
                                "screening_and_enro_arm_1" ~ "t1",
                                "t2_survey_arm_1" ~ "t2",
                                .default = NA_character_))



```

## Duration of LC symptoms and diagnosis

* Categorize months_symps? If so what are the cut points/breaks 
```{r}
pt_clinical %>%
  select(months_symps, lcdiagnosis, redcap_event_name) %>%
  tbl_summary(by = redcap_event_name)
```

## Latency between symptom onset and diagnosis
```{r}
pt_clinical %>%
  filter(lcdiagnosis  == "Yes") %>%
  select(ifyes_monthsymps, redcap_event_name) %>%
  tbl_summary(by = redcap_event_name)
```

## Conditions
```{r}
pt_clinical %>%
  select(conditions___1:conditions___14, redcap_event_name) %>%
  mutate(across(conditions___1:conditions___14, ~ sample(0:1, n(), replace = TRUE))) %>% # Fabricate data
  rename("Hypertension" = conditions___1,
        "Obesity" = conditions___2,
        "Chronic lung disease (COPD, asthma, pulmonary fibrosis)" = conditions___3,
        "Diabetes Mellitus" = conditions___4,
        "Chronic immune suppression (organ transplant, HIV)" = conditions___5,
        "Coronary artery disease" = conditions___6,
        "High cholesterol" = conditions___7,
        "Heart arrhythmias" = conditions___8,
        "Major depression" = conditions___9,
        "Anxiety" = conditions___10,
        "PTSD" = conditions___11,
        "Cancer" = conditions___12,
        "Other (please describe)"= conditions___13,
        "None"= conditions___14
        ) %>%
  tbl_summary(by = redcap_event_name)
```

## Medications

```{r}
pt_clinical %>%
  select(medications___1:medications___13, redcap_event_name) %>%
  mutate(across(medications___1:medications___13, ~ sample(0:1, n(), replace = TRUE))) %>% # Fabricate data
  rename("Paxlovid" = medications___1,
        "Low dose naltrexone" = medications___2,
        "Heart rate controlling agents (beta-blockers, calcium channel blockers, ivabradine)" = medications___3,
        "Prednisone" = medications___4,
        "Lung inhaler medications (Symbicort, Advair/Wixela, Breo)" = medications___5,
        "Midodrine" = medications___6,
        "Fludricortisone" = medications___7,
        "SSRIs/SNRIs" = medications___8,
        "Memantine" = medications___9,
        "Adderall/Ritalin" = medications___10,
        "Modafinil" = medications___11,
        "Other medicine (please specify)"= medications___12,
        "None"= medications___13
        ) %>%
  tbl_summary(by = redcap_event_name)
```

## Therapies/services

```{r}
pt_clinical %>%
  select(therapies___13:therapies___21, redcap_event_name) %>%
  mutate(across(therapies___13:therapies___21, ~ sample(0:1, n(), replace = TRUE))) %>% # Fabricate data
  rename("Speech therapy/cognitive training" = therapies___13,
        "Physical therapy" = therapies___14,
        "Occupational therapy" = therapies___15,
        "Group therapy/peer support" = therapies___16,
        "Pulmonary rehab" = therapies___17,
        "Counseling/mental or behavioral health therapy" = therapies___18,
        "Complementary/alternative therapies (examples like acupuncture, supplements, chiropractic, etc.)" = therapies___19,
        "Other services (please specify)"= therapies___20,
        "None"= therapies___21
        ) %>%
  tbl_summary(by = redcap_event_name)
```

## Patient clinical questions complete
```{r}
pt_clinical %>%
  select(redcap_event_name, patient_clinical_questions_complete) %>%
  mutate(across(patient_clinical_questions_complete, ~ sample(0:2, n(), replace = TRUE))) %>% # Fabricate data
  mutate(patient_clinical_questions_complete = case_match(patient_clinical_questions_complete, 
                              0 ~ "Incomplete",
                              1 ~ "Unverified",
                              2 ~ "Complete"
                              )) %>%          
  tbl_summary(by = redcap_event_name)
```


# Promis
* Two time points are shown for illustrative purposes only, actual data will show up to 4
* How to display measures (means or frequencies)?
* How to display questions? abbreviated or full text?

```{r}
# Notes: the Promis at baseline is a seprate instrument as the promis at t2 through t4, but the questions seem identical

# The two instruments will need to be stacked in order to display properly.

```
```{r}
.sms_token <- Sys.getenv("LC_patient")

url <- "https://redcap.ucdenver.edu/api/"

formData <- list(token = .sms_token, content = "report", format = "csv",
                 report_id = "150982", csvDelimiter = "", rawOrLabel = "raw",
                 rawOrLabelHeaders = "raw", exportCheckboxLabel = "false",
                 returnFormat = "csv")

response <- httr::POST(url, body = formData, encode = "form")

promis <- httr::content(response)
```

```{r}
# Select the Promis t2-t4 timepoints
promis_t2_t4 <- 
promis %>%
  select(promis_record_id, redcap_event_name, ends_with("_v2"), promis_global_health_t2t4_complete) %>%
  mutate(redcap_event_name = "t2_survey_arm_1")

# May need to modify the redcap_even_names to stack

# Select the Promis t1 timepoint only
promis <- 
  promis %>%
  select(promis_record_id:promis_global_health_complete)

# May need to filter any event name that is not t1

# Extract the names of the promis
col_names <- names(promis)

# Rename the columns of t2-t4
names(promis_t2_t4) <- col_names

# Bind rows into a new data frame
promis <- bind_rows(promis, promis_t2_t4)
```


```{r}
# Recode the red_cap_event_names
promis <-
  promis %>%
    mutate(redcap_event_name = case_match(redcap_event_name, 
                                   "screening_and_enro_arm_1" ~ "t1",
                                   "t2_survey_arm_1" ~ "t2",
                                   .default = NA_character_))
```

```{r}
promis %>%
  # group_by(promis_record_id) %>%
  # fill(., promis_global01:promis_global07, .direction = c("downup")) %>%
  # ungroup() %>%
  mutate(across(promis_global01:avg_fatigue, ~ sample(1:5, n(), replace = TRUE))) %>%   # Fabricate data
  mutate(across(avg_pain, ~ sample(1:10, n(), replace = TRUE))) %>%                     # Fabricate data
  select(- promis_record_id, promis_global_health_complete) %>%
  rename("health" = promis_global01,
        "quality of life" = promis_global02,
        "physical health" = promis_global03,
        "mental health" = promis_global04,
        "satisfaction w/ social activities & relationships" = promis_global05,
        "carry out social activities and roles" = promis_global06,
        "carry out physical activities" = promis_global07,
        ) %>%          
  tbl_summary(by = redcap_event_name,
              type = list(everything() ~ "continuous"),
              statistic = list(everything() ~ "{mean} ({sd})"),
              missing = "no")
```

## Promis global health complete
```{r}
promis %>%
  select(redcap_event_name, promis_global_health_complete) %>%
  mutate(across(promis_global_health_complete, ~ sample(0:2, n(), replace = TRUE))) %>% # Fabricate data
  mutate(promis_global_health_complete = case_match(promis_global_health_complete, 
                              0 ~ "Incomplete",
                              1 ~ "Unverified",
                              2 ~ "Complete"
                              )) %>%          
  tbl_summary(by = redcap_event_name)
```

# PASC

* One option is to display the common PASC questions by time point
* What to do about the branching? Display as is or create separate tables
* Could also only display the "Yes" responses to simplify the tables
```{r}
pasc <- get_report_data("151040", "raw")
```


```{r}
# Create the ps2 datframe
ps2 <- 
  pasc %>%
  select(promis_record_id, redcap_event_name, starts_with("ps2"), pasc_symptoms_only_t2_t4_complete) %>%
  mutate(redcap_event_name = "t2")

# This assumes we go with just binarizing all responses instead of having them
# as categorical for the sympton questions
ps2 %<>%
  mutate(across(ps2_ptpasc:ps2_other, ~ sample(c(1,0,-88), n(), replace = TRUE))) %>% # Fabricate data
  mutate(across(ps2_ptpasc:ps2_other, ~ ifelse(.x == 1, 1, 0)))

# Create the ps1 data frame so that it is only the 
ps1 <- 
  pasc %>%
  select(-all_of(names(ps2 %>% select(-promis_record_id, -redcap_event_name)))) %>%
  mutate(redcap_event_name = "t1")

```


```{r}
# Modify the first PASC Question
ps1 %<>%
  filter(redcap_event_name == "t1") %>%
  mutate(across(ps_ptpasc:ps_other, ~ sample(c(1,0,-88), n(), replace = TRUE))) %>% # Fabricate data
  mutate(ps_ptpasc = case_match(ps_ptpasc, 
                                0 ~ "Yes",
                                1 ~ "No",
                                -88 ~ "I don't know or prefer not to answer")) %>%
  mutate(ps_ptpasc = factor(ps_ptpasc, levels = c("Yes", "No", "I don't know or prefer not to answer")))
```

```{r}
# Tabulate the first PASC question
# If answered yes, then the remaining questions will branch
# otherwise, they will not.
ps1 %>%
  select(ps_ptpasc) %>%
  rename("Do you think you currently have symptoms or health problems resulting from your COVID infection?" = ps_ptpasc) %>%
  tbl_summary()
```


## PASC Symptom Questions Only

```{r} 
# Format the data for display
ps1 %>%
  select(ps_fatigue:ps_other) %>%
  mutate(across(ps_fatigue:ps_other, ~ case_match(.x, 
                            0 ~ "No, I do NOT have this symptom",
                            1 ~ "Yes, I have this symptom",
                            -88 ~ "I don't know or prefer not to answer"
                            ))) %>%
  mutate(across(ps_fatigue:ps_other, ~ factor(.x, levels = c("No, I do NOT have this symptom", "Yes, I have this symptom", "I don't know or prefer not to answer")))) %>%
  tbl_summary()

```

## PASC Symptom Questions Only ("Yes" responses only)
```{r}
ps1 %>%
  select(ps_fatigue:ps_other) %>%
  mutate(across(ps_fatigue:ps_other, ~ ifelse(.x ==1, 1, 0))) %>%
  tbl_summary()

```

## PASCT Symptoms Questions by time point
```{r}
ps2_names <- ps2 %>% names()

# Replace the ps2_ prefix with ps_
ps2_names <- str_replace(ps2_names, "ps2_", "ps_")

# Rename columns
names(ps2) <- ps2_names

# Common names
ps_names <- names(ps1 %>% select(promis_record_id, redcap_event_name, ps_fatigue:ps_other))

bind_rows(ps1 %>% select(all_of(ps_names)), ps2 %>% select(all_of(ps_names))) %>%
  mutate(across(ps_fatigue:ps_other, ~ ifelse(.x == 1, 1, 0))) %>%
  select(-promis_record_id) %>%
  tbl_summary(by = redcap_event_name)



```