---
title: "Patient Survey Accrual Report Version 2"

date: "`r format(Sys.Date(), '%m-%d-%Y')`"

format: 
  docx:
    toc: true
    embed-resources: true
    reference-doc: "D:/custom-reference-doc.docx"

execute: 
  echo: false
---

```{r, message=FALSE, warning=FALSE}
library(magrittr, include = "%<>%")

library(dfmtbx)
# renv::install("carlosivanr/dfmtbx") # To update

pacman::p_load(
  tidyverse,
  gtsummary
)
```

```{r}
#| echo: false
# Participant accrual report draft
# Project ID = 33298
# Report ID = 148994
```

```{r, message=FALSE, warning=FALSE}
# Pull report 148994 as labeled data
# Corresponds to patient_enrollment report in REDCap
data <- pull_redcap_report(Sys.getenv("LC_patient"), "148994", "label", "raw", "true")

# Capture the column names
names_data <- names(data)

# Drop the demographic select all that apply questions
data %<>%
  select(
    -starts_with("patient_race"),
    -starts_with("patient_insurance"),
    -starts_with("patient_employ"),
    -redcap_event_name # use raw instead of label to preserve prior functions
)
```

```{r, message=FALSE, warning=FALSE}
# Pull report 148994 as raw data for the demographic variables only
demographics <- 
  pull_redcap_report(Sys.getenv("LC_patient"), "148994", "raw", "raw", "false") %>%
  select(
    redcap_event_name,
    starts_with("patient_race"),
    starts_with("patient_insurance"),
    starts_with("patient_employ")
  )
```

```{r}
# Merge the primary data set with the demographic data set
data <- bind_cols(data, demographics)

# Re-order the columns to preserve the order in the the data frame data
data %<>%
  select(all_of(names_data))

# Rename promis_record_id to record_id (easier to type)
data %<>%
  rename(record_id = promis_record_id)

# Clear workspace variables
rm(demographics, names_data)
```


```{r}
# Determine how many time points are available. As of 09/29/2025, 4 unique time points
timepoints <- length(table(data$redcap_event_name))

# Send an email as soon as an additional time point is added
if (timepoints > 4) {
  # If there are duplicates, notify by email
  library(Microsoft365R)

  # Authenticate and get your Outlook object
  outlook <- get_business_outlook()  # or get_personal_outlook()

  # Create and send an email
  email <- outlook$create_email(
    body = "T3 data detected in Long COVID RedCap. Update patient_accrual_report",
    subject = "Long COVID: New timepoint detected.",
    to = "carlos.i.rodriguez@cuanschutz.edu"
  )

  email$send()
  
}
```


```{r}
# Identify test records as those with the "test" in the name field OR those
# with "test record" in the anything else field
test_ids <- 
  data %>%
    filter(
      grepl("test", name, ignore.case = TRUE) | 
      grepl("test record", anythingelse, ignore.case = TRUE)) %>%
    pull(record_id)

# Identify duplicated record_ids as those with "Duplicated record" in the 
# enrollstatus field
duplicated_ids <- 
  data %>%
    filter(enrollstatus == "Duplicate record") %>%
    pull(record_id)

# Remove the test and duplicated ids
data %<>%
  filter(!record_id %in% c(test_ids, duplicated_ids))
```

```{r}
# /////////////////////////////// Data Clean Up ///////////////////////////////
# Create a site variable by coalescing mdc_name and pcc_name before filling
# values
data %<>%
  mutate(site_name = coalesce(mdc_name, pcc_name))

# Fill in empty values for pcc_or_mdc, mdc_name, and pcc_name columns
data %<>%
  group_by(record_id) %>%
  fill(pcc_or_mdc, .direction = c("updown")) %>%
  fill(site_name, .direction = c("updown")) %>%
  ungroup()

# Rename pcc_or_mdc to site_type for readability, and make unknown explicit
data %<>%
  rename(site_type = pcc_or_mdc) %>%
  mutate(site_type = ifelse(is.na(site_type), "Unknown", site_type)) %>%
  mutate(site_name = ifelse(is.na(site_name), "Unknown", site_name))
```

```{r}
# ////////////////////////// Data check for consent ///////////////////////////
# Check to ensure that if the consent_name and patient_consent_form_complete 
# are both missing to validate that one or the other can be used to reliably 
# indicate whether consent was given,
mismatched_consent_values <- 
  data %>% 
  filter(is.na(consent_name) & patient_consent_form_complete == "Complete") %>% 
  nrow()

# If the number of mismatched_consent_values is not 0, then notify by sending
# an email to manually review records
if (mismatched_consent_values > 0) {
  # If there are duplicates, notify by email
  library(Microsoft365R)

  # Authenticate and create Outlook object
  outlook <- get_business_outlook()  # or get_personal_outlook()

  # Create email
  email <- outlook$create_email(
    body = "Error in patient_accrual_report.qmd. Mismatched consent values detected.",
    subject = "Error in Long COVID automated workflow.",
    to = "carlos.i.rodriguez@cuanschutz.edu"
  )

  # Send email
  email$send()

  # Stop the render
  stop("Error in .qmd file. Logic error in counting consented vs consent form complete. Review data.")
}
```


```{r}
# DEVELOPMENT
# Remove enrollstatus == "No response" | is.na(enrollstatus)
# These would be classified as those that have not been contacted yet either 
# because the candidate has not been reached, or the study team hasn't gotten
# to attempting contact yet. Would be used to filter out any of these IDs from
# tabulating, but not yet implemented. CR 09/29/2025
no_contact_ids <- data %>%
  filter(redcap_event_name == "screening_and_enro_arm_1", is.na(enrollstatus)) %>%
  pull(record_id)
```

```{r}
#  Create a dataframe with binary variables to tabulate the number of screened, 
# enrolled, and consented patients.
tab_data <- data %>%
  select(record_id, enrollstatus, patient_consent_form_complete, healthrelated_social_needs_complete) %>%
  group_by(record_id) %>%
  fill(enrollstatus, patient_consent_form_complete, healthrelated_social_needs_complete, .direction = "updown") %>%
  slice_head() %>%
  ungroup() %>%
  # This section placed here to match Izzy's definitions
  # mutate(
  #   enrollstatus = ifelse(
  #     record_id %in% c(4, 22, 26, 30), 
  #     "Enrollment completed", 
  #     enrollstatus)) %>%
  # mutate(
  #   patient_consent_form_complete = ifelse(
  #     record_id %in% c(4, 22, 26, 30), 
  #     NA, patient_consent_form_complete)) %>%
  
  # Convert missing values in enrollstatus to Unknown/ could be not yet screened or contacted but no response
  mutate(
    across(enrollstatus:healthrelated_social_needs_complete, ~ ifelse(is.na(.x), "Unknown", .x)))

  # This was an older version, but it may be more clearer if the variables are not binarized
  # mutate(
  #   across(
  #     enrollstatus:healthrelated_social_needs_complete, 
  #     ~ ifelse(grepl("Incomplete", .x, ignore.case = TRUE), 0, .x)),
  #   across(
  #     enrollstatus:healthrelated_social_needs_complete, 
  #     ~ ifelse(grepl("complete", .x, ignore.case = TRUE), 1, 0)),
  # ) 
```

# Screened and consented patients
- Total unique patients: Total number of number of unique record ids excluding test and duplicated records found in RedCap.
```{r}
tab_data %>%
  select(-record_id, -healthrelated_social_needs_complete) %>%
  tbl_summary(
    label = list(
      enrollstatus ~ "RedCap field: enrollstatus",
      patient_consent_form_complete ~ "RedCap field: patient consent form complete")
  ) %>%
  modify_header(label = "**Total unique patients**")
```


# Consented patients by Site Type and Site Name
```{r}
# Denominator of those that have consented
data %>%
  group_by(record_id) %>%
  slice_head() %>%
  ungroup() %>%
  filter(record_id %in% (tab_data %>% filter(patient_consent_form_complete == 1 | patient_consent_form_complete == "Complete") %>% pull(record_id))) %>%
  select(site_type, site_name) %>%
  tbl_summary(
    label = list(
      site_type ~ "Site Type",
      site_name ~ "Site Name")
  )
```

# Survey completion rates for T1 and T2 Overall
- denominator consists of unique records where patient_consent_form is complete 
```{r}
# Denominator is a complete pre-enrollment form
# T1 Numerator is a complete health related social needs form at consent_and_t1_sur_arm_1
# T2 Numerator is a complete Experiences with care t2_survey_arm_1
# T3 Numerator is a complete Experiences with care t3_survey_arm_1
# T4 Numerator is a complete Experiences with care t4_survey_arm_1
```

```{r}
# denominator
# *** patient record_id 41 consented, but patient_enrollment_form_complete not
# complete at T1
# The patient consent form complete can be used because there are no values 
# where patient consent is complete and consent_name is missing
consented_ids <- 
  tab_data %>%
  filter(patient_consent_form_complete == "Complete") %>%
  pull(record_id)



# Create a table using the record_ids in denominator ids which are the
# participants that have a complete patient_enrollment_form this will give
# the proportion of individuals who have consented and submitted a T1 
# survey out of those recruited from the clinics to undergo screening.
tab_t1_t2_rates <- 
  data %>%
  filter(record_id %in% consented_ids) %>%
  group_by(record_id) %>%
  fill(c(
    healthrelated_social_needs_complete, 
    healthrelated_social_needs_timestamp,
    pasc_symptoms_and_followup_questions_complete,
    experiences_with_care_complete,
    experiences_with_care_timestamp), 
    .direction = "updown") %>%
  mutate(across(c(
    healthrelated_social_needs_timestamp, 
    experiences_with_care_timestamp), ~ as.Date(.x))) %>%
  slice_head() %>%
  ungroup() %>%
  mutate(days_since_t1 = 
    as.numeric(Sys.Date() - healthrelated_social_needs_timestamp)) %>%
  select(
    record_id,
    healthrelated_social_needs_complete, 
    pasc_symptoms_and_followup_questions_complete,
    experiences_with_care_complete,
    days_since_t1) %>%
  mutate(t2_status = ifelse(
    is.na(experiences_with_care_complete) & days_since_t1 < 90, 
    "Not due", 
    experiences_with_care_complete)) %>%
  mutate(t2_status = ifelse(
    is.na(experiences_with_care_complete) & is.na(t2_status) & days_since_t1 >= 90 & days_since_t1 < 135, 
    "Within window", 
    t2_status)) %>%
  mutate(t2_status = ifelse(
    pasc_symptoms_and_followup_questions_complete == "Incomplete", "Incomplete PASC", t2_status
  ))
```


```{r}
# There are two patients in tab_t1_t2_rates, record_ids 17 and 41 that have a partial completion of the T1 survey. Not sure if they will receive an invite for T2.
```

## Survey completion rates for T1 by Site Type
```{r}
data %>%
  filter(
    record_id %in% consented_ids,
    redcap_event_name == "consent_and_t1_sur_arm_1"
  ) %>%
  select(healthrelated_social_needs_complete, site_type) %>%
  tbl_summary(
    by = site_type,
    label = list(
      "healthrelated_social_needs_complete" ~ "Health Related Social Needs Form"
    )
    ) 
```

## Survey completion rates for T2 by Site Type
```{r}
tab_t1_t2_rates %>%
  left_join(., data %>% 
               filter(record_id %in% tab_t1_t2_rates$record_id) %>% 
               select(site_type, record_id) %>% 
               group_by(record_id) %>% 
               slice_head() %>% 
               ungroup(),
            by = "record_id") %>%
  select(-days_since_t1, -experiences_with_care_complete, -record_id, -pasc_symptoms_and_followup_questions_complete) %>%
  tbl_summary(
    by = "site_type",
    label = list(
      healthrelated_social_needs_complete = "Health Related Social Needs Form (T1)",
      t2_status = "T2 Status"
    )
  )
```


<!-- # Patient Demographics -->
```{r}
# Manually inspect gender_other as free text
# Manually inspect patient_sexorient_descr as free text
```

```{r}
# Make a backup
data_full <- data
```

```{r}
# Patient age gender and sexual orientation
data <- 
  data %>%
  filter(redcap_event_name == "consent_and_t1_sur_arm_1") %>%
  filter(record_id %in% consented_ids) %>%
  # mutate(patient_age = sample(18:75, n(), replace = TRUE)) %>% # Fabricate data
  mutate(age_group = case_when(
                               patient_age >= 18 & patient_age < 35 ~ "18-34",
                               patient_age >= 35 & patient_age < 65 ~ "35-64",
                               patient_age >= 65 ~ "65+",
                               TRUE ~ NA_character_
                               ),
         age_group = factor(age_group, levels = c("18-34", "35-64", "65+"), ordered = TRUE)) #%>%
  # mutate(patient_gender = sample(1:7, n(), replace = TRUE)) %>% # Fabricate data
  # mutate(patient_gender = case_match(patient_gender, 
  #                                    1 ~ "Male",
  #                                    2 ~ "Female",
  #                                    3 ~ "TransMale",
  #                                    4 ~ "TransFeml",
  #                                    5 ~ "Non-Bin",
  #                                    6 ~ "Other",
  #                                    7 ~ "PrefNoAnswr")) %>%
  # # mutate(patient_sexorient = sample(1:8, n(), replace = TRUE)) %>% # Fabricate data                                    
  # mutate(patient_sexorient = case_match(patient_sexorient, 
  #                                     1 ~ "Asexl",
  #                                     2 ~ "Bisexl",
  #                                     3 ~ "GayLesbn",
  #                                     4 ~ "Hetero",
  #                                     5 ~ "Pansexl",
  #                                     6 ~ "Queer",
  #                                     7 ~ "SelfDesc",
  #                                     8 ~ "PrefNoAnswr"))
```

# Patient demographics & characteristics
## Age, gender, sexual orientation
```{r}
# Patient age, gender and sexual orientation
data %>%
  select(age_group, patient_gender, patient_sexorient) %>%
  tbl_summary(
    # statistic = list(all_continuous() ~ "{mean} ({sd})"),
    label = list(
      age_group ~ "Age group",
      patient_gender ~ "Gender",
      patient_sexorient ~ "Sexual orientation"
    )
    )
```

## Race & ethnicity
```{r}
# Patient race and ethnicity
data %>%
  select(patient_race___1:patient_race___7, patient_ethn) %>%
  mutate(across(patient_race___1:patient_race___7, ~ factor(.x, levels = c(0, 1)))) %>%
  # Either columns are renamed, or the labels are set in tbl_summary()
  # rename("White" = patient_race___5,
  #        "Black" = patient_race___1,
  #        "Asian" = patient_race___3,
  #        "AA/AN" = patient_race___2,
  #        "Native Hawaiian/Other Pacific Islander" = patient_race___4,
  #        "Other" = patient_race___6,
  #        "PrefNoAnswr" = patient_race___7) %>%
  tbl_summary(
    label = list(
      "patient_race___1" ~ "African American or Black",
      "patient_race___2" ~ "American Indian/Alaska Native.",
      "patient_race___3" ~ "Asian",
      "patient_race___4" ~ "Native Hawaiian/Other Pacific Islander",
      "patient_race___5" ~ "White",
      "patient_race___6" ~ "Other",
      "patient_race___7" ~ "Prefer not to answer",
      "patient_ethn" ~ "Hispanic"),
    value = list(patient_race___1 ~ "1",
                 patient_race___2 ~ "1",
                 patient_race___3 ~ "1",
                 patient_race___4 ~ "1",
                 patient_race___5 ~ "1",
                 patient_race___6 ~ "1",
                 patient_race___7 ~ "1")
  )
```

## Patient preferred language
```{r}
# Patient preferred language
data %>%
  # mutate(across(patient_pref_lang, ~ sample(1:4, n(), replace = TRUE))) %>% # Fabricate data
  # mutate(patient_pref_lang = case_match(patient_pref_lang, 
  #                                 1 ~ "English",
  #                                 2 ~ "Spanish",
  #                                 3 ~ "Other",
  #                                 4 ~ "PrefNoAnswr")) %>%
  select(patient_pref_lang) %>%
  tbl_summary(
    label = list("patient_pref_lang" ~ "Patient preferred lang.")
  )
```

## Patient insurance
```{r}
# Patient race and ethnicity
data %>%
  select(patient_insurance___1:patient_insurance___10) %>%
  mutate(across(everything(), ~ factor(.x, levels = c(0,1)))) %>%
  tbl_summary(
    label = list(
      "patient_insurance___1" ~ "State market place",
      "patient_insurance___2" ~ "Employee provided",
      "patient_insurance___3" ~ "Medicaid",
      "patient_insurance___4" ~ "Medicare - Original Medicare",
      "patient_insurance___5" ~ "Medicare - Advantage Plan",
      "patient_insurance___6" ~ "Worker's Comp",
      "patient_insurance___7" ~ "Other",
      "patient_insurance___8" ~ "Self-pay",
      "patient_insurance___9" ~ "Uninsured",
      "patient_insurance___10" ~ "Prefer not to answer",
      "patient_insurance___11" ~ "Medigap",
      "patient_insurance___12" ~ "Medicare Part D"
    ),
    value = everything() ~ "1"
  )
```

## Patient education level
```{r}
# Patient education level
data %>%
  # mutate(across(patient_school, ~ sample(1:9, n(), replace = TRUE))) %>% # Fabricate data
  # mutate(patient_school = case_match(patient_school, 
  #                                 1 ~ "No schooling completed",
  #                                 2 ~ "Nursery school to 8th grade",
  #                                 3 ~ "Some high school, no diploma",
  #                                 4 ~ "	High school graduate, diploma or the equivalent (for example: GED)",
  #                                 5 ~ "Some college credit, no degree",
  #                                 6 ~ "Associate degree",
  #                                 7 ~ "Bachelor's degree",
  #                                 8 ~ "Master's degree",
  #                                 9 ~ "Professional or Doctorate degree"
  #                                 )) %>%
  select(patient_school) %>%
  tbl_summary(
    label = list(patient_school ~ "Patient education level")
  )
```

## Patient marital status
```{r}
data %>%
  # mutate(across(patient_marital, ~ sample(1:6, n(), replace = TRUE))) %>% # Fabricate data
  # mutate(patient_marital = case_match(patient_marital, 
  #                                 1 ~ "Single",
  #                                 2 ~ "In a relationship",
  #                                 3 ~ "Married",
  #                                 4 ~ "Divorced/Separated",
  #                                 5 ~ "Widowed",
  #                                 6 ~ "Other (please describe)"
  #                                 )) %>%
  select(patient_marital) %>%
  tbl_summary(
    label = list(patient_marital ~ "Patient marital status")
  )
```

## Patient employment status pre- long COVID
```{r}
data %>%
  select(patient_employ___1:patient_employ___7) %>%
  mutate(across(everything(), ~ factor(.x, levels = c(0,1)))) %>%
  tbl_summary(
    label = list(
      patient_employ___1 ~ "Employed Full-time",
      patient_employ___2 ~ "Employed Part-time",
      patient_employ___3 ~ "Unemployed",
      patient_employ___4 ~ "Disabled",
      patient_employ___5 ~ "Retired",
      patient_employ___6 ~ "Student",
      patient_employ___7 ~ "Other"
    ),
    value = everything() ~ "1"
  )
```

## Patient employment status current
```{r}
data %>%
  # mutate(across(patient_employ_2___1:patient_employ_2___7, ~ sample(0:1, n(), replace = TRUE))) %>% # Fabricate data
  select(patient_employ_2___1:patient_employ_2___7) %>%
  mutate(across(everything(), ~ factor(.x, levels = c(0,1)))) %>%
  tbl_summary(
    label = list(
      patient_employ_2___1 ~ "Employed Full-time",
      patient_employ_2___2 ~ "Employed Part-time",
      patient_employ_2___3 ~ "Unemployed",
      patient_employ_2___4 ~ "Disabled",
      patient_employ_2___5 ~ "Retired",
      patient_employ_2___6 ~ "Student",
      patient_employ_2___7 ~ "Other"
      ),
    value = everything() ~ "1"
  )
```